type token =
  | NUM of (int)
  | ID of (string)
  | BOOL of (bool)
  | STRING of (string)
  | BEGIN
  | END
  | DOT
  | PROGRAM
  | FUNCTION
  | PROCEDURE
  | VAR
  | INTEGER
  | BOOLEAN
  | ARRAY
  | OF
  | TYPE
  | NEW
  | LT
  | LE
  | GT
  | GE
  | EQ
  | NE
  | OR
  | AND
  | NOT
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | COLONEQ
  | COLON
  | SEMICOLON
  | COMMA
  | IF
  | THEN
  | ELSE
  | WHILE
  | DO
  | PLUS
  | MINUS
  | TIMES
  | DIV
  | WRITE
  | WRITELN
  | READ
  | READLN
  | COMMENT

open Parsing;;
let _ = parse_error;;
# 2 "pseudopascal.mly"
open Printf;;
open Syntax;;
# 57 "pseudopascal.ml"
let yytransl_const = [|
  261 (* BEGIN *);
  262 (* END *);
  263 (* DOT *);
  264 (* PROGRAM *);
  265 (* FUNCTION *);
  266 (* PROCEDURE *);
  267 (* VAR *);
  268 (* INTEGER *);
  269 (* BOOLEAN *);
  270 (* ARRAY *);
  271 (* OF *);
  272 (* TYPE *);
  273 (* NEW *);
  274 (* LT *);
  275 (* LE *);
  276 (* GT *);
  277 (* GE *);
  278 (* EQ *);
  279 (* NE *);
  280 (* OR *);
  281 (* AND *);
  282 (* NOT *);
  283 (* LPAREN *);
  284 (* RPAREN *);
  285 (* LBRACKET *);
  286 (* RBRACKET *);
  287 (* COLONEQ *);
  288 (* COLON *);
  289 (* SEMICOLON *);
  290 (* COMMA *);
  291 (* IF *);
  292 (* THEN *);
  293 (* ELSE *);
  294 (* WHILE *);
  295 (* DO *);
  296 (* PLUS *);
  297 (* MINUS *);
  298 (* TIMES *);
  299 (* DIV *);
  300 (* WRITE *);
  301 (* WRITELN *);
  302 (* READ *);
  303 (* READLN *);
  304 (* COMMENT *);
    0|]

let yytransl_block = [|
  257 (* NUM *);
  258 (* ID *);
  259 (* BOOL *);
  260 (* STRING *);
    0|]

let yylhs = "\255\255\
\001\000\002\000\002\000\006\000\006\000\005\000\007\000\007\000\
\003\000\003\000\009\000\009\000\010\000\010\000\010\000\011\000\
\011\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\004\000\013\000\013\000\015\000\015\000\014\000\014\000\016\000\
\016\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\012\000\012\000\012\000\012\000\012\000\012\000\012\000\012\000\
\008\000\008\000\008\000\000\000"

let yylen = "\002\000\
\005\000\000\000\004\000\000\000\003\000\003\000\001\000\003\000\
\000\000\003\000\010\000\008\000\000\000\004\000\006\000\000\000\
\003\000\003\000\003\000\006\000\004\000\004\000\004\000\004\000\
\006\000\000\000\002\000\000\000\003\000\000\000\002\000\000\000\
\003\000\003\000\001\000\002\000\001\000\003\000\003\000\002\000\
\001\000\004\000\004\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\003\000\002\000\
\001\000\001\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\060\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\035\000\000\000\037\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\008\000\000\000\003\000\057\000\058\000\
\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\
\040\000\000\000\056\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\010\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\027\000\019\000\000\000\000\000\034\000\
\000\000\000\000\000\000\000\000\038\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\005\000\059\000\000\000\000\000\000\000\
\000\000\000\000\031\000\000\000\000\000\000\000\000\000\000\000\
\021\000\023\000\024\000\000\000\000\000\000\000\000\000\000\000\
\000\000\029\000\042\000\043\000\000\000\000\000\017\000\000\000\
\000\000\000\000\033\000\020\000\000\000\000\000\000\000\012\000\
\015\000\000\000\011\000"

let yydgoto = "\002\000\
\004\000\006\000\012\000\033\000\037\000\038\000\009\000\042\000\
\013\000\078\000\111\000\034\000\048\000\081\000\084\000\115\000"

let yysindex = "\022\000\
\022\255\000\000\023\255\000\000\031\255\000\255\003\255\027\255\
\030\255\061\255\067\255\153\255\037\255\031\255\031\255\014\255\
\044\255\045\255\000\000\241\254\000\000\153\255\014\255\012\255\
\012\255\012\255\012\255\012\255\052\255\053\255\055\255\057\255\
\068\255\115\002\000\255\000\000\043\255\000\000\000\000\000\000\
\062\255\000\000\084\255\084\255\012\255\012\255\064\255\082\255\
\000\000\073\255\000\000\163\001\189\001\215\001\245\254\012\255\
\012\255\076\255\077\255\000\000\012\255\012\255\012\255\012\255\
\012\255\012\255\012\255\012\255\012\255\012\255\012\255\012\255\
\012\255\000\000\031\255\014\255\072\255\079\255\080\255\241\001\
\081\255\141\002\153\255\000\000\000\000\012\255\012\255\000\000\
\153\255\153\255\011\002\037\002\000\000\000\000\049\255\049\255\
\049\255\049\255\049\255\049\255\235\254\235\254\063\002\245\254\
\245\254\083\255\083\255\000\000\000\000\099\255\085\255\086\255\
\088\255\012\255\000\000\000\000\064\255\094\255\089\002\089\255\
\000\000\000\000\000\000\092\255\072\255\014\255\014\255\023\255\
\241\001\000\000\000\000\000\000\153\255\012\255\000\000\096\255\
\097\255\153\255\000\000\000\000\141\002\084\255\023\255\000\000\
\000\000\153\255\000\000"

let yyrindex = "\000\000\
\000\000\000\000\093\255\000\000\000\000\200\255\095\255\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\140\255\000\000\
\000\000\000\000\000\000\167\002\000\000\119\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\200\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\104\255\104\255\105\255\000\000\129\255\000\000\
\000\000\005\000\000\000\000\000\000\000\000\000\147\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\140\255\000\000\030\255\000\000\000\000\108\255\
\000\000\048\255\000\000\000\000\000\000\105\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\016\001\041\001\
\066\001\091\001\116\001\141\001\222\000\247\000\000\000\172\000\
\197\000\043\000\081\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\119\000\129\255\000\000\000\000\000\000\
\000\000\000\000\000\000\193\002\030\255\000\000\000\000\231\255\
\108\255\000\000\000\000\000\000\000\000\000\000\000\000\114\255\
\000\000\000\000\000\000\000\000\050\255\104\255\231\255\000\000\
\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\130\255\109\000\234\255\141\000\072\000\134\000\244\255\
\000\000\213\255\026\000\235\255\000\000\066\000\036\000\030\000"

let yytablesize = 1004
let yytable = "\047\000\
\079\000\138\000\051\000\052\000\053\000\054\000\055\000\087\000\
\010\000\011\000\049\000\045\000\019\000\050\000\021\000\046\000\
\146\000\087\000\070\000\071\000\072\000\073\000\001\000\080\000\
\082\000\039\000\040\000\041\000\023\000\003\000\072\000\073\000\
\007\000\005\000\091\000\092\000\014\000\024\000\025\000\095\000\
\096\000\097\000\098\000\099\000\100\000\101\000\102\000\103\000\
\104\000\105\000\106\000\107\000\028\000\018\000\018\000\025\000\
\025\000\031\000\032\000\015\000\117\000\016\000\017\000\109\000\
\080\000\119\000\120\000\121\000\018\000\035\000\043\000\044\000\
\067\000\068\000\060\000\075\000\076\000\087\000\056\000\057\000\
\018\000\058\000\025\000\059\000\018\000\077\000\025\000\085\000\
\070\000\071\000\072\000\073\000\129\000\002\000\002\000\002\000\
\083\000\002\000\145\000\086\000\125\000\002\000\002\000\093\000\
\094\000\110\000\112\000\113\000\116\000\002\000\140\000\087\000\
\141\000\136\000\137\000\144\000\126\000\127\000\002\000\002\000\
\128\000\131\000\134\000\147\000\026\000\133\000\007\000\002\000\
\142\000\143\000\002\000\013\000\030\000\002\000\028\000\032\000\
\002\000\002\000\002\000\002\000\004\000\014\000\004\000\074\000\
\004\000\008\000\108\000\036\000\004\000\004\000\135\000\118\000\
\130\000\019\000\020\000\021\000\004\000\022\000\139\000\000\000\
\000\000\000\000\000\000\000\000\000\000\004\000\004\000\000\000\
\000\000\023\000\000\000\000\000\000\000\000\000\004\000\000\000\
\000\000\004\000\024\000\025\000\004\000\000\000\000\000\004\000\
\004\000\004\000\004\000\026\000\000\000\000\000\027\000\000\000\
\000\000\028\000\000\000\000\000\029\000\030\000\031\000\032\000\
\009\000\009\000\009\000\000\000\009\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\009\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\009\000\009\000\000\000\000\000\000\000\000\000\002\000\
\002\000\002\000\009\000\002\000\000\000\009\000\000\000\000\000\
\009\000\000\000\000\000\009\000\009\000\009\000\009\000\002\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\002\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\002\000\041\000\041\000\002\000\000\000\000\000\002\000\
\000\000\000\000\002\000\002\000\002\000\002\000\041\000\041\000\
\041\000\041\000\041\000\041\000\041\000\041\000\000\000\000\000\
\041\000\041\000\041\000\000\000\000\000\041\000\041\000\000\000\
\041\000\041\000\000\000\041\000\041\000\041\000\041\000\041\000\
\046\000\046\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\046\000\046\000\046\000\046\000\
\046\000\046\000\046\000\046\000\000\000\000\000\046\000\000\000\
\046\000\000\000\000\000\046\000\046\000\000\000\046\000\046\000\
\000\000\046\000\046\000\046\000\046\000\046\000\047\000\047\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\047\000\047\000\047\000\047\000\047\000\047\000\
\047\000\047\000\000\000\000\000\047\000\000\000\047\000\000\000\
\000\000\047\000\047\000\000\000\047\000\047\000\000\000\047\000\
\047\000\047\000\047\000\047\000\022\000\022\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\042\000\042\000\042\000\042\000\042\000\042\000\042\000\042\000\
\000\000\000\000\000\000\042\000\000\000\000\000\000\000\022\000\
\036\000\036\000\000\000\022\000\000\000\000\000\042\000\042\000\
\042\000\042\000\000\000\000\000\036\000\036\000\036\000\036\000\
\036\000\036\000\036\000\036\000\000\000\000\000\036\000\000\000\
\036\000\044\000\044\000\036\000\036\000\000\000\036\000\036\000\
\000\000\036\000\036\000\036\000\000\000\044\000\044\000\044\000\
\044\000\044\000\044\000\044\000\044\000\000\000\000\000\044\000\
\000\000\044\000\045\000\045\000\044\000\044\000\000\000\044\000\
\044\000\000\000\044\000\044\000\044\000\000\000\045\000\045\000\
\045\000\045\000\045\000\045\000\045\000\045\000\000\000\000\000\
\045\000\000\000\045\000\054\000\054\000\045\000\045\000\000\000\
\045\000\045\000\000\000\045\000\045\000\045\000\000\000\054\000\
\054\000\054\000\054\000\054\000\054\000\054\000\054\000\000\000\
\000\000\054\000\000\000\054\000\055\000\055\000\054\000\054\000\
\000\000\054\000\054\000\000\000\054\000\000\000\000\000\000\000\
\055\000\055\000\055\000\055\000\055\000\055\000\055\000\055\000\
\000\000\000\000\055\000\000\000\055\000\048\000\048\000\055\000\
\055\000\000\000\055\000\055\000\000\000\055\000\000\000\000\000\
\000\000\048\000\048\000\048\000\048\000\048\000\048\000\000\000\
\000\000\000\000\000\000\048\000\000\000\048\000\049\000\049\000\
\048\000\048\000\000\000\048\000\048\000\000\000\048\000\000\000\
\000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\000\000\000\000\000\000\000\000\049\000\000\000\049\000\050\000\
\050\000\049\000\049\000\000\000\049\000\049\000\000\000\049\000\
\000\000\000\000\000\000\050\000\050\000\050\000\050\000\050\000\
\050\000\000\000\000\000\000\000\000\000\050\000\000\000\050\000\
\051\000\051\000\050\000\050\000\000\000\050\000\050\000\000\000\
\050\000\000\000\000\000\000\000\051\000\051\000\051\000\051\000\
\051\000\051\000\000\000\000\000\000\000\000\000\051\000\000\000\
\051\000\052\000\052\000\051\000\051\000\000\000\051\000\051\000\
\000\000\051\000\000\000\000\000\000\000\052\000\052\000\052\000\
\052\000\052\000\052\000\000\000\000\000\000\000\000\000\052\000\
\000\000\052\000\053\000\053\000\052\000\052\000\000\000\052\000\
\052\000\000\000\052\000\000\000\000\000\000\000\053\000\053\000\
\053\000\053\000\053\000\053\000\000\000\000\000\000\000\000\000\
\053\000\000\000\053\000\000\000\000\000\053\000\053\000\000\000\
\053\000\053\000\000\000\053\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\000\000\088\000\087\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\000\000\
\000\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\089\000\000\000\000\000\000\000\070\000\071\000\072\000\073\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\000\000\000\000\000\000\087\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\090\000\070\000\071\000\
\072\000\073\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\000\000\000\000\000\000\087\000\000\000\000\000\
\000\000\000\000\114\000\000\000\000\000\000\000\000\000\000\000\
\070\000\071\000\072\000\073\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\000\000\122\000\087\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\000\000\
\123\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\071\000\072\000\073\000\
\061\000\062\000\063\000\064\000\065\000\066\000\067\000\068\000\
\000\000\000\000\000\000\087\000\124\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\070\000\071\000\
\072\000\073\000\061\000\062\000\063\000\064\000\065\000\066\000\
\067\000\068\000\000\000\000\000\000\000\087\000\132\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\070\000\071\000\072\000\073\000\061\000\062\000\063\000\064\000\
\065\000\066\000\067\000\068\000\000\000\000\000\000\000\069\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\070\000\071\000\072\000\073\000\061\000\062\000\
\063\000\064\000\065\000\066\000\067\000\068\000\000\000\000\000\
\000\000\087\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\070\000\071\000\072\000\073\000\
\041\000\041\000\041\000\041\000\041\000\041\000\041\000\041\000\
\000\000\000\000\000\000\041\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\041\000\041\000\
\041\000\041\000\043\000\043\000\043\000\043\000\043\000\043\000\
\043\000\043\000\000\000\000\000\000\000\043\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\043\000\043\000\043\000\043\000"

let yycheck = "\022\000\
\044\000\128\000\024\000\025\000\026\000\027\000\028\000\029\001\
\009\001\010\001\023\000\027\001\001\001\002\001\003\001\031\001\
\143\000\029\001\040\001\041\001\042\001\043\001\001\000\045\000\
\046\000\012\001\013\001\014\001\017\001\008\001\042\001\043\001\
\002\001\011\001\056\000\057\000\034\001\026\001\027\001\061\000\
\062\000\063\000\064\000\065\000\066\000\067\000\068\000\069\000\
\070\000\071\000\072\000\073\000\041\001\006\001\007\001\006\001\
\007\001\046\001\047\001\033\001\083\000\032\001\002\001\076\000\
\086\000\087\000\089\000\090\000\002\001\033\001\027\001\027\001\
\024\001\025\001\007\001\033\001\015\001\029\001\027\001\027\001\
\033\001\027\001\033\001\027\001\037\001\002\001\037\001\006\001\
\040\001\041\001\042\001\043\001\114\000\001\001\002\001\003\001\
\033\001\005\001\142\000\027\001\002\001\009\001\010\001\028\001\
\028\001\034\001\028\001\028\001\028\001\017\001\133\000\029\001\
\134\000\126\000\127\000\138\000\032\001\032\001\026\001\027\001\
\033\001\028\001\031\001\146\000\006\001\037\001\032\001\035\001\
\033\001\033\001\038\001\028\001\028\001\041\001\006\001\028\001\
\044\001\045\001\046\001\047\001\001\001\028\001\003\001\035\000\
\005\001\005\000\075\000\014\000\009\001\010\001\125\000\086\000\
\117\000\001\001\002\001\003\001\017\001\005\001\129\000\255\255\
\255\255\255\255\255\255\255\255\255\255\026\001\027\001\255\255\
\255\255\017\001\255\255\255\255\255\255\255\255\035\001\255\255\
\255\255\038\001\026\001\027\001\041\001\255\255\255\255\044\001\
\045\001\046\001\047\001\035\001\255\255\255\255\038\001\255\255\
\255\255\041\001\255\255\255\255\044\001\045\001\046\001\047\001\
\001\001\002\001\003\001\255\255\005\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\017\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\026\001\027\001\255\255\255\255\255\255\255\255\001\001\
\002\001\003\001\035\001\005\001\255\255\038\001\255\255\255\255\
\041\001\255\255\255\255\044\001\045\001\046\001\047\001\017\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\026\001\027\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\035\001\006\001\007\001\038\001\255\255\255\255\041\001\
\255\255\255\255\044\001\045\001\046\001\047\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\030\001\255\255\255\255\033\001\034\001\255\255\
\036\001\037\001\255\255\039\001\040\001\041\001\042\001\043\001\
\006\001\007\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\255\255\
\030\001\255\255\255\255\033\001\034\001\255\255\036\001\037\001\
\255\255\039\001\040\001\041\001\042\001\043\001\006\001\007\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\028\001\255\255\030\001\255\255\
\255\255\033\001\034\001\255\255\036\001\037\001\255\255\039\001\
\040\001\041\001\042\001\043\001\006\001\007\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\033\001\
\006\001\007\001\255\255\037\001\255\255\255\255\040\001\041\001\
\042\001\043\001\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\255\255\
\030\001\006\001\007\001\033\001\034\001\255\255\036\001\037\001\
\255\255\039\001\040\001\041\001\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\024\001\025\001\255\255\255\255\028\001\
\255\255\030\001\006\001\007\001\033\001\034\001\255\255\036\001\
\037\001\255\255\039\001\040\001\041\001\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\255\255\030\001\006\001\007\001\033\001\034\001\255\255\
\036\001\037\001\255\255\039\001\040\001\041\001\255\255\018\001\
\019\001\020\001\021\001\022\001\023\001\024\001\025\001\255\255\
\255\255\028\001\255\255\030\001\006\001\007\001\033\001\034\001\
\255\255\036\001\037\001\255\255\039\001\255\255\255\255\255\255\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\028\001\255\255\030\001\006\001\007\001\033\001\
\034\001\255\255\036\001\037\001\255\255\039\001\255\255\255\255\
\255\255\018\001\019\001\020\001\021\001\022\001\023\001\255\255\
\255\255\255\255\255\255\028\001\255\255\030\001\006\001\007\001\
\033\001\034\001\255\255\036\001\037\001\255\255\039\001\255\255\
\255\255\255\255\018\001\019\001\020\001\021\001\022\001\023\001\
\255\255\255\255\255\255\255\255\028\001\255\255\030\001\006\001\
\007\001\033\001\034\001\255\255\036\001\037\001\255\255\039\001\
\255\255\255\255\255\255\018\001\019\001\020\001\021\001\022\001\
\023\001\255\255\255\255\255\255\255\255\028\001\255\255\030\001\
\006\001\007\001\033\001\034\001\255\255\036\001\037\001\255\255\
\039\001\255\255\255\255\255\255\018\001\019\001\020\001\021\001\
\022\001\023\001\255\255\255\255\255\255\255\255\028\001\255\255\
\030\001\006\001\007\001\033\001\034\001\255\255\036\001\037\001\
\255\255\039\001\255\255\255\255\255\255\018\001\019\001\020\001\
\021\001\022\001\023\001\255\255\255\255\255\255\255\255\028\001\
\255\255\030\001\006\001\007\001\033\001\034\001\255\255\036\001\
\037\001\255\255\039\001\255\255\255\255\255\255\018\001\019\001\
\020\001\021\001\022\001\023\001\255\255\255\255\255\255\255\255\
\028\001\255\255\030\001\255\255\255\255\033\001\034\001\255\255\
\036\001\037\001\255\255\039\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\036\001\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\039\001\040\001\041\001\
\042\001\043\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\255\255\034\001\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\028\001\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\028\001\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\029\001\030\001\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\030\001\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001\018\001\019\001\020\001\021\001\
\022\001\023\001\024\001\025\001\255\255\255\255\255\255\029\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\040\001\041\001\042\001\043\001\018\001\019\001\
\020\001\021\001\022\001\023\001\024\001\025\001\255\255\255\255\
\255\255\029\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\040\001\041\001\042\001\043\001\
\018\001\019\001\020\001\021\001\022\001\023\001\024\001\025\001\
\255\255\255\255\255\255\029\001\255\255\255\255\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\040\001\041\001\
\042\001\043\001\018\001\019\001\020\001\021\001\022\001\023\001\
\024\001\025\001\255\255\255\255\255\255\029\001\255\255\255\255\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\040\001\041\001\042\001\043\001"

let yynames_const = "\
  BEGIN\000\
  END\000\
  DOT\000\
  PROGRAM\000\
  FUNCTION\000\
  PROCEDURE\000\
  VAR\000\
  INTEGER\000\
  BOOLEAN\000\
  ARRAY\000\
  OF\000\
  TYPE\000\
  NEW\000\
  LT\000\
  LE\000\
  GT\000\
  GE\000\
  EQ\000\
  NE\000\
  OR\000\
  AND\000\
  NOT\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  COLONEQ\000\
  COLON\000\
  SEMICOLON\000\
  COMMA\000\
  IF\000\
  THEN\000\
  ELSE\000\
  WHILE\000\
  DO\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIV\000\
  WRITE\000\
  WRITELN\000\
  READ\000\
  READLN\000\
  COMMENT\000\
  "

let yynames_block = "\
  NUM\000\
  ID\000\
  BOOL\000\
  STRING\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'vars) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'definitions) in
    let _4 = (Parsing.peek_val __caml_parser_env 1 : 'instructions) in
    Obj.repr(
# 37 "pseudopascal.mly"
 ( Program(_2 , _3 , _4) )
# 523 "pseudopascal.ml"
               : Syntax.program))
; (fun __caml_parser_env ->
    Obj.repr(
# 45 "pseudopascal.mly"
      ( [] )
# 529 "pseudopascal.ml"
               : 'vars))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'vars1) in
    Obj.repr(
# 46 "pseudopascal.mly"
                           ( _2 :: _4 )
# 537 "pseudopascal.ml"
               : 'vars))
; (fun __caml_parser_env ->
    Obj.repr(
# 48 "pseudopascal.mly"
       ( [] )
# 543 "pseudopascal.ml"
               : 'vars1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'var) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'vars1) in
    Obj.repr(
# 49 "pseudopascal.mly"
                       ( _1 :: _3 )
# 551 "pseudopascal.ml"
               : 'vars1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'idlist) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 51 "pseudopascal.mly"
                            ( _1 , _3 )
# 559 "pseudopascal.ml"
               : 'var))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 56 "pseudopascal.mly"
           ( [_1] )
# 566 "pseudopascal.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'idlist) in
    Obj.repr(
# 57 "pseudopascal.mly"
                   ( _1 :: _3 )
# 574 "pseudopascal.ml"
               : 'idlist))
; (fun __caml_parser_env ->
    Obj.repr(
# 59 "pseudopascal.mly"
                       ( [] )
# 580 "pseudopascal.ml"
               : 'definitions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'fonctions) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'definitions) in
    Obj.repr(
# 60 "pseudopascal.mly"
                                  ( _1 :: _3 )
# 588 "pseudopascal.ml"
               : 'definitions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'args) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : 'type_expr) in
    let _9 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : 'instructions) in
    Obj.repr(
# 63 "pseudopascal.mly"
  ( Func_def(_2, Definition(_4, Some _7, _9, _10 )) )
# 599 "pseudopascal.ml"
               : 'fonctions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 4 : 'args) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : 'vars) in
    let _8 = (Parsing.peek_val __caml_parser_env 0 : 'instructions) in
    Obj.repr(
# 65 "pseudopascal.mly"
  ( Func_def(_2, Definition(_4, None , _7, _8 )) )
# 609 "pseudopascal.ml"
               : 'fonctions))
; (fun __caml_parser_env ->
    Obj.repr(
# 67 "pseudopascal.mly"
      ( [] )
# 615 "pseudopascal.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'args1) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 69 "pseudopascal.mly"
                            ( [(_1 :: _2 , _4)] )
# 624 "pseudopascal.ml"
               : 'args))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'args1) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'type_expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'args) in
    Obj.repr(
# 70 "pseudopascal.mly"
                                           ( (_1 :: _2 , _4) :: _6 )
# 634 "pseudopascal.ml"
               : 'args))
; (fun __caml_parser_env ->
    Obj.repr(
# 72 "pseudopascal.mly"
       ( [] )
# 640 "pseudopascal.ml"
               : 'args1))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'args1) in
    Obj.repr(
# 73 "pseudopascal.mly"
                  ( _2 :: _3 )
# 648 "pseudopascal.ml"
               : 'args1))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "pseudopascal.mly"
                              ( Set (_1, _3) )
# 656 "pseudopascal.ml"
               : 'instructions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'blocs) in
    Obj.repr(
# 76 "pseudopascal.mly"
                   ( Sequence _2 )
# 663 "pseudopascal.ml"
               : 'instructions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 4 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 2 : 'instructions) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'instructions) in
    Obj.repr(
# 77 "pseudopascal.mly"
                                               ( If (_2, _4, _6) )
# 672 "pseudopascal.ml"
               : 'instructions))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'instructions) in
    Obj.repr(
# 78 "pseudopascal.mly"
                              ( While (_2, _4) )
# 680 "pseudopascal.ml"
               : 'instructions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 79 "pseudopascal.mly"
                              ( Procedure_call (_1, _3) )
# 688 "pseudopascal.ml"
               : 'instructions))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 81 "pseudopascal.mly"
                                 ( Write (_3) )
# 695 "pseudopascal.ml"
               : 'instructions))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 82 "pseudopascal.mly"
                                 ( Writeln (_3) )
# 702 "pseudopascal.ml"
               : 'instructions))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 83 "pseudopascal.mly"
                                            ( Seti (_1, _3, _6) )
# 711 "pseudopascal.ml"
               : 'instructions))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "pseudopascal.mly"
       ( [] )
# 717 "pseudopascal.ml"
               : 'blocs))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'instructions) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'bloc) in
    Obj.repr(
# 89 "pseudopascal.mly"
                     ( _1 :: _2 )
# 725 "pseudopascal.ml"
               : 'blocs))
; (fun __caml_parser_env ->
    Obj.repr(
# 91 "pseudopascal.mly"
      ( [] )
# 731 "pseudopascal.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'instructions) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'bloc) in
    Obj.repr(
# 92 "pseudopascal.mly"
                               ( _2 :: _3 )
# 739 "pseudopascal.ml"
               : 'bloc))
; (fun __caml_parser_env ->
    Obj.repr(
# 94 "pseudopascal.mly"
           ( [] )
# 745 "pseudopascal.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'argument) in
    Obj.repr(
# 95 "pseudopascal.mly"
                 ( _1 :: _2 )
# 753 "pseudopascal.ml"
               : 'arguments))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "pseudopascal.mly"
          ( [] )
# 759 "pseudopascal.ml"
               : 'argument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'argument) in
    Obj.repr(
# 98 "pseudopascal.mly"
                       ( _2 :: _3 )
# 767 "pseudopascal.ml"
               : 'argument))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 100 "pseudopascal.mly"
                         ( _2 )
# 774 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 101 "pseudopascal.mly"
       ( Int _1  )
# 781 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 102 "pseudopascal.mly"
                                ( Un (UMinus, _2) )
# 788 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 103 "pseudopascal.mly"
        (Bool _1 )
# 795 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 104 "pseudopascal.mly"
                               ( Read )
# 801 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "pseudopascal.mly"
                               ( Readln )
# 807 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 106 "pseudopascal.mly"
                 ( New _2 )
# 814 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 107 "pseudopascal.mly"
      ( Get _1 )
# 821 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arguments) in
    Obj.repr(
# 108 "pseudopascal.mly"
                              ( Function_call (_1, _3) )
# 829 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 109 "pseudopascal.mly"
                               ( Geti (_1, _3) )
# 837 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 110 "pseudopascal.mly"
                 ( Bin (Plus, _1, _3) )
# 845 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 111 "pseudopascal.mly"
                  ( Bin (Minus, _1, _3))
# 853 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 112 "pseudopascal.mly"
                  ( Bin (Times, _1, _3) )
# 861 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 113 "pseudopascal.mly"
                ( Bin (Div, _1, _3) )
# 869 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 114 "pseudopascal.mly"
               ( Bin (Lt, _1, _3) )
# 877 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 115 "pseudopascal.mly"
               ( Bin (Le, _1, _3) )
# 885 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 116 "pseudopascal.mly"
               ( Bin (Gt, _1, _3) )
# 893 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 117 "pseudopascal.mly"
               ( Bin (Ge, _1, _3) )
# 901 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 118 "pseudopascal.mly"
               ( Bin (Eq, _1, _3) )
# 909 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 119 "pseudopascal.mly"
               ( Bin (Ne, _1, _3) )
# 917 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 120 "pseudopascal.mly"
               ( Bin (Or, _1, _3) )
# 925 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 121 "pseudopascal.mly"
                ( Bin (And, _1, _3) )
# 933 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 122 "pseudopascal.mly"
           ( Un (Not, _2) )
# 940 "pseudopascal.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 124 "pseudopascal.mly"
                    ( Integer )
# 946 "pseudopascal.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 125 "pseudopascal.mly"
           ( Boolean )
# 952 "pseudopascal.ml"
               : 'type_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'type_expr) in
    Obj.repr(
# 126 "pseudopascal.mly"
                      ( Array (_3) )
# 959 "pseudopascal.ml"
               : 'type_expr))
(* Entry input *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let input (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Syntax.program)
;;
